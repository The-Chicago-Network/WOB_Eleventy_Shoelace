<script type='module'>
  import { insert } from 'https://unpkg.com/@lyrasearch/lyra@0.3.1/dist/esm/src/lyra.js';
  import { profiles } from './assets/js/instantiateDatabase.js';
  import { filterResultsByTag } from './assets/js/filterResultsByTag.js';
  import { emptyNest } from './assets/js/emptyNest.js';
  import { populateSelect } from './assets/js/populateFilterSelectInputs.js';
  import { buildResultCards } from './assets/js/buildResultCards.js';
  import { filterStore } from './assets/js/filterStore.js';
  import { runSearch } from './assets/js/runSearch.js';

  {% include 'populateDatabase.liquid' %}

  const dialog = document.querySelector('.dialog-overview');
  const openButton = document.querySelector('.dialogToggle');
  const closeButton = dialog.querySelector('sl-button[slot="footer"]');
  const searchInput = document.querySelector('.searchInput');
  const form = document.querySelector('.WOB-Search');
  const resultsContainer = document.querySelector('.searchResults');
  filterStore.watchedElements = document.querySelectorAll('sl-select');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());

  // Target element IDs to populate with tags
  const targetIDs = ['tags_current_position', 'tags_past_positions', 'tags_experience', 'tags_general', 'tags_current_sector', 'tags_past_sectors', 'tags_current_industry', 'tags_past_industries', 'tags_current_board_service', 'tags_past_board_service'];

  // Properties to be injected into search
  const properties = ['bio','name','currentTitle','currentOrg', 'boards_current_corporate_private', 'boards_current_corporate_public', 'boards_current_nonprofit', 'boards_current_privateequity', 'boards_current_spac', 'boards_current_vc', 'boards_past_corporate_private', 'boards_past_corporate_public', 'boards_past_nonprofit', 'boards_past_privateequity', 'boards_past_spac', 'boards_past_vc' ];

  // Populate select inputs in filter modal with tags
  targetIDs.forEach(x => {
    populateSelect(x);
  });

  // Clear results when search box is cleared
  searchInput.addEventListener('sl-clear', event => {
    emptyNest(resultsContainer);
    filterStore.searchResults = null;
  })

  // Clear results when search box content is empty
  searchInput.addEventListener('sl-input', event => {
    if (searchInput.value == '') {
      emptyNest(resultsContainer);
      filterStore.searchResults = null;
    }
  })

  // Handle submit
  form.addEventListener('submit', event => {
    event.preventDefault();
    const searchResult = runSearch(properties, `${searchInput.value}`, 600);
    filterStore.searchResults = searchResult;
    filterStore.render(filterStore.searchResults, resultsContainer);
  })

  filterStore.watch(resultsContainer);

</script>
