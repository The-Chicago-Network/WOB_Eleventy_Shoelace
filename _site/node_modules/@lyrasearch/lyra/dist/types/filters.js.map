{"version":3,"sources":["../../src/types/filters.ts"],"sourcesContent":["import type { PropertiesSchema } from \"./index.js\";\n\nexport type FilterOperation =\n  | \"gt\"\n  | \"gte\"\n  | \"lt\"\n  | \"lte\"\n  | \"eq\"\n  | \"between\";\n\ntype ComparisonOperator = {\n  gt?: number;\n  gte?: number;\n  lt?: number;\n  lte?: number;\n  eq?: number;\n  between?: [number, number];\n}\n\ntype PickOne<T> = { [P in keyof T]: Record<P, T[P]> & Partial<Record<Exclude<keyof T, P>, undefined>> }[keyof T]\n\nexport type WhereFilter<\n  S extends PropertiesSchema,\n  P extends string = \"\",\n  K extends keyof S = keyof S> = K extends string\n  ? S[K] extends PropertiesSchema\n    ? WhereFilter<S[K], `${P}${K}.`>\n    : S[K] extends \"number\"\n      ? { [key in `${P}${K}`]?: PickOne<ComparisonOperator> }\n      : never\n  : never;"],"names":[],"mappings":"AAAA,WA8BU"}