import { greaterThan, lessThan, rangeSearch, find } from "./trees/avl/index.js";
import { intersect } from "./utils.js";
import * as ERRORS from "./errors.js";
export function getWhereFiltersIDs(filters, lyra) {
    const filterKeys = Object.keys(filters);
    const filtersMap = filterKeys.reduce((acc, key)=>({
            [key]: [],
            ...acc
        }), {});
    for (const param of filterKeys){
        const operation = filters[param];
        const operationKeys = Object.keys(operation);
        if (operationKeys.length > 1) {
            throw new Error(ERRORS.INVALID_FILTER_OPERATION(operationKeys));
        }
        const operationOpt = operationKeys[0];
        const operationValue = operation[operationOpt];
        const AVLNode = lyra.index[param];
        switch(operationOpt){
            case "gt":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = greaterThan(AVLNode, operationValue, false);
                    filtersMap[param].push(...filteredIDs);
                    break;
                }
            case "gte":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = greaterThan(AVLNode, operationValue, true);
                    filtersMap[param].push(...filteredIDs);
                    break;
                }
            case "lt":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = lessThan(AVLNode, operationValue, false);
                    filtersMap[param].push(...filteredIDs);
                    break;
                }
            case "lte":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = lessThan(AVLNode, operationValue, true);
                    filtersMap[param].push(...filteredIDs);
                    break;
                }
            case "eq":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = find(AVLNode, operationValue);
                    filtersMap[param].push(...filteredIDs);
                    break;
                }
            case "between":
                {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - this is a bug in the typescript compiler
                    const filteredIDs = rangeSearch(AVLNode, operationValue[0], operationValue[1]);
                    filtersMap[param].push(...filteredIDs);
                }
        }
    }
    // AND operation: calculate the intersection between all the IDs in filterMap
    const result = intersect(Object.values(filtersMap));
    return result;
}
export function intersectFilteredIDs(filtered, lookedUp) {
    const map = new Map();
    const result = [];
    for (const id of filtered){
        map.set(id, true);
    }
    for (const [id, score] of lookedUp){
        if (map.has(id)) {
            result.push([
                id,
                score
            ]);
            map.delete(id);
        }
    }
    return result;
}

//# sourceMappingURL=filters.js.map