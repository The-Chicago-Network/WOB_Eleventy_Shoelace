{"version":3,"sources":["../src/algorithms.ts"],"sourcesContent":["import type { BM25Params, TokenScore } from \"./types/index.js\";\nimport * as ERRORS from \"./errors.js\";\n\n// Adapted from https://github.com/lovasoa/fast_array_intersect\n// MIT Licensed (https://github.com/lovasoa/fast_array_intersect/blob/master/LICENSE)\n// while on tag https://github.com/lovasoa/fast_array_intersect/tree/v1.1.0\nexport function intersectTokenScores(arrays: TokenScore[][]): TokenScore[] {\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i].length < arrays[0].length) {\n      const tmp = arrays[0];\n      arrays[0] = arrays[i];\n      arrays[i] = tmp;\n    }\n  }\n\n  const set: Map<string, [number, number]> = new Map();\n  for (const elem of arrays[0]) {\n    set.set(elem[0], [1, elem[1]]);\n  }\n\n  const arrLength = arrays.length;\n  for (let i = 1; i < arrLength; i++) {\n    let found = 0;\n    for (const elem of arrays[i]) {\n      /* c8 ignore next */\n      const key = elem[0] ?? \"\";\n\n      const [count, score] = set.get(key) ?? [0, 0];\n      if (count === i) {\n        set.set(key, [count + 1, score + elem[1]]);\n        found++;\n      }\n    }\n\n    if (found === 0) {\n      return [];\n    }\n  }\n\n  const result: TokenScore[] = [];\n\n  for (const [token, [count, score]] of set) {\n    if (count === arrLength) {\n      result.push([token, score]);\n    }\n  }\n\n  return result;\n}\n\nexport function prioritizeTokenScores(arrays: TokenScore[][], boost: number): TokenScore[] {\n  if (boost === 0) {\n    throw new Error(ERRORS.INVALID_BOOST_VALUE());\n  }\n\n  const tokenMap: Record<string, number> = {};\n\n  const mapsLength = arrays.length;\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i];\n\n    const entriesLength = arr.length;\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j];\n      const boostScore = score * boost;\n\n      if (token in tokenMap) {\n        tokenMap[token] *= 1.5 + boostScore;\n      } else {\n        tokenMap[token] = boostScore;\n      }\n    }\n  }\n\n  return Object.entries(tokenMap).sort((a, b) => b[1] - a[1]);\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: BM25Params\n) {\n  const { k, b, d } = BM25Params;\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5));\n  return idf * (d + tf * (k + 1)) / (tf + k * (1 - b + b * fieldLength / averageFieldLength));\n}"],"names":["ERRORS","intersectTokenScores","arrays","length","i","tmp","set","Map","elem","arrLength","found","key","count","score","get","result","token","push","prioritizeTokenScores","boost","Error","INVALID_BOOST_VALUE","tokenMap","mapsLength","arr","entriesLength","j","boostScore","Object","entries","sort","a","b","BM25","tf","matchingCount","docsCount","fieldLength","averageFieldLength","BM25Params","k","d","idf","Math","log"],"mappings":"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"}