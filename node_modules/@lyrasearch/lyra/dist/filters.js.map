{"version":3,"sources":["../src/filters.ts"],"sourcesContent":["import type { WhereFilter, FilterOperation, PropertiesSchema, Lyra } from \"./types/index.js\";\nimport type { AVLNode } from \"./trees/avl/node.js\";\nimport { greaterThan, lessThan, rangeSearch, find } from \"./trees/avl/index.js\";\nimport { intersect } from './utils.js'\nimport * as ERRORS from \"./errors.js\";\n\nexport function getWhereFiltersIDs<S extends PropertiesSchema>(filters: WhereFilter<S>, lyra: Lyra<S>): string[] {\n  const filterKeys = Object.keys(filters);\n\n  const filtersMap: Record<string, string[]> = filterKeys.reduce((acc, key) => ({\n    [key]: [],\n    ...acc,\n  }), {});\n  \n  for (const param of filterKeys) {\n    const operation = filters[param as keyof WhereFilter<S>]\n    const operationKeys = Object.keys(operation as unknown as FilterOperation[])\n\n    if (operationKeys.length > 1) {\n      throw new Error(ERRORS.INVALID_FILTER_OPERATION(operationKeys))\n    }\n\n    const operationOpt = operationKeys[0] as FilterOperation\n    const operationValue = operation[operationOpt as keyof typeof operation];\n\n    const AVLNode = lyra.index[param] as AVLNode<number, string[]>;\n\n    switch (operationOpt) {\n      case \"gt\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = greaterThan(AVLNode, operationValue, false);\n        filtersMap[param].push(...filteredIDs);\n        break;\n      }\n      case \"gte\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = greaterThan(AVLNode, operationValue, true);\n        filtersMap[param].push(...filteredIDs);\n        break;\n      }\n      case \"lt\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = lessThan(AVLNode, operationValue, false);\n        filtersMap[param].push(...filteredIDs);\n        break;\n      }\n      case \"lte\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = lessThan(AVLNode, operationValue, true);\n        filtersMap[param].push(...filteredIDs);\n        break;\n      }\n      case \"eq\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = find(AVLNode, operationValue);\n        filtersMap[param].push(...filteredIDs!);\n        break;\n      }\n      case \"between\": {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - this is a bug in the typescript compiler\n        const filteredIDs = rangeSearch(AVLNode, operationValue[0], operationValue[1]);\n        filtersMap[param].push(...filteredIDs);\n      }\n    }\n  }\n\n  // AND operation: calculate the intersection between all the IDs in filterMap\n  const result = intersect(Object.values(filtersMap)) as unknown as string[];\n\n  return result;\n}\n\nexport function intersectFilteredIDs(filtered: string[], lookedUp: [string, number][]): [string, number][] {\n  const map = new Map<string, boolean>();\n  const result: [string, number][] = [];\n\n  for (const id of filtered) {\n    map.set(id, true);\n  }\n\n  for (const [id, score] of lookedUp) {\n    if (map.has(id)) {\n      result.push([id, score]);\n      map.delete(id);\n    }\n  }\n\n  return result;\n}"],"names":["greaterThan","lessThan","rangeSearch","find","intersect","ERRORS","getWhereFiltersIDs","filters","lyra","filterKeys","Object","keys","filtersMap","reduce","acc","key","param","operation","operationKeys","length","Error","INVALID_FILTER_OPERATION","operationOpt","operationValue","AVLNode","index","filteredIDs","push","result","values","intersectFilteredIDs","filtered","lookedUp","map","Map","id","set","score","has","delete"],"mappings":"AAEA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,QAAQ,uBAAuB;AAChF,SAASC,SAAS,QAAQ,aAAY;AACtC,YAAYC,YAAY,cAAc;AAEtC,OAAO,SAASC,mBAA+CC,OAAuB,EAAEC,IAAa,EAAY;IAC/G,MAAMC,aAAaC,OAAOC,IAAI,CAACJ;IAE/B,MAAMK,aAAuCH,WAAWI,MAAM,CAAC,CAACC,KAAKC,MAAS,CAAA;YAC5E,CAACA,IAAI,EAAE,EAAE;YACT,GAAGD,GAAG;QACR,CAAA,GAAI,CAAC;IAEL,KAAK,MAAME,SAASP,WAAY;QAC9B,MAAMQ,YAAYV,OAAO,CAACS,MAA8B;QACxD,MAAME,gBAAgBR,OAAOC,IAAI,CAACM;QAElC,IAAIC,cAAcC,MAAM,GAAG,GAAG;YAC5B,MAAM,IAAIC,MAAMf,OAAOgB,wBAAwB,CAACH,gBAAe;QACjE,CAAC;QAED,MAAMI,eAAeJ,aAAa,CAAC,EAAE;QACrC,MAAMK,iBAAiBN,SAAS,CAACK,aAAuC;QAExE,MAAME,UAAUhB,KAAKiB,KAAK,CAACT,MAAM;QAEjC,OAAQM;YACN,KAAK;gBAAM;oBACT,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMI,cAAc1B,YAAYwB,SAASD,gBAAgB,KAAK;oBAC9DX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;oBAC1B,KAAM;gBACR;YACA,KAAK;gBAAO;oBACV,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMA,cAAc1B,YAAYwB,SAASD,gBAAgB,IAAI;oBAC7DX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;oBAC1B,KAAM;gBACR;YACA,KAAK;gBAAM;oBACT,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMA,cAAczB,SAASuB,SAASD,gBAAgB,KAAK;oBAC3DX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;oBAC1B,KAAM;gBACR;YACA,KAAK;gBAAO;oBACV,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMA,cAAczB,SAASuB,SAASD,gBAAgB,IAAI;oBAC1DX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;oBAC1B,KAAM;gBACR;YACA,KAAK;gBAAM;oBACT,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMA,cAAcvB,KAAKqB,SAASD;oBAClCX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;oBAC1B,KAAM;gBACR;YACA,KAAK;gBAAW;oBACd,6DAA6D;oBAC7D,wDAAwD;oBACxD,MAAMA,cAAcxB,YAAYsB,SAASD,cAAc,CAAC,EAAE,EAAEA,cAAc,CAAC,EAAE;oBAC7EX,UAAU,CAACI,MAAM,CAACW,IAAI,IAAID;gBAC5B;QACF;IACF;IAEA,6EAA6E;IAC7E,MAAME,SAASxB,UAAUM,OAAOmB,MAAM,CAACjB;IAEvC,OAAOgB;AACT,CAAC;AAED,OAAO,SAASE,qBAAqBC,QAAkB,EAAEC,QAA4B,EAAsB;IACzG,MAAMC,MAAM,IAAIC;IAChB,MAAMN,SAA6B,EAAE;IAErC,KAAK,MAAMO,MAAMJ,SAAU;QACzBE,IAAIG,GAAG,CAACD,IAAI,IAAI;IAClB;IAEA,KAAK,MAAM,CAACA,IAAIE,MAAM,IAAIL,SAAU;QAClC,IAAIC,IAAIK,GAAG,CAACH,KAAK;YACfP,OAAOD,IAAI,CAAC;gBAACQ;gBAAIE;aAAM;YACvBJ,IAAIM,MAAM,CAACJ;QACb,CAAC;IACH;IAEA,OAAOP;AACT,CAAC"}