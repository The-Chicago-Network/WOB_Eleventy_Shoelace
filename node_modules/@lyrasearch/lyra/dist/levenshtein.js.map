{"version":3,"sources":["../src/levenshtein.ts"],"sourcesContent":["export type BoundedMetric = {\n  isBounded: boolean;\n  distance: number;\n};\n\n/**\n * Computes the Levenshtein distance between two strings (a, b), returning early with -1 if the distance\n * is greater than the given tolerance.\n * It assumes that:\n * - tolerance >= ||a| - |b|| >= 0\n */\nexport function boundedLevenshtein(a: string, b: string, tolerance: number): BoundedMetric {\n  const distance = _boundedLevenshtein(a, b, tolerance);\n  return {\n    distance,\n    isBounded: distance >= 0,\n  };\n}\n\n/**\n * Inspired by:\n * https://github.com/Yomguithereal/talisman/blob/86ae55cbd040ff021d05e282e0e6c71f2dde21f8/src/metrics/levenshtein.js#L218-L340\n */\nfunction _boundedLevenshtein(a: string, b: string, tolerance: number): number {\n  // the strings are the same\n  if (a === b) {\n    return 0;\n  }\n\n  // a should be the shortest string\n  const swap = a;\n  if (a.length > b.length) {\n    a = b;\n    b = swap;\n  }\n\n  let lenA = a.length;\n  let lenB = b.length;\n\n  // ignore common suffix\n  // note: `~-` decreases by a unit in a bitwise fashion\n  while (lenA > 0 && a.charCodeAt(~-lenA) === b.charCodeAt(~-lenB)) {\n    lenA--;\n    lenB--;\n  }\n\n  // early return when the smallest string is empty\n  if (!lenA) {\n    return lenB > tolerance ? -1 : lenB;\n  }\n\n  // ignore common prefix\n  let startIdx = 0;\n  while (startIdx < lenA && a.charCodeAt(startIdx) === b.charCodeAt(startIdx)) {\n    startIdx++;\n  }\n  lenA -= startIdx;\n  lenB -= startIdx;\n\n  // early return when the smallest string is empty\n  if (lenA === 0) {\n    return lenB > tolerance ? -1 : lenB;\n  }\n\n  const delta = lenB - lenA;\n\n  if (tolerance > lenB) {\n    tolerance = lenB;\n  } else if (delta > tolerance) {\n    return -1;\n  }\n\n  let i = 0;\n  const row = [];\n  const characterCodeCache = [];\n\n  while (i < tolerance) {\n    characterCodeCache[i] = b.charCodeAt(startIdx + i);\n    row[i] = ++i;\n  }\n\n  while (i < lenB) {\n    characterCodeCache[i] = b.charCodeAt(startIdx + i);\n    row[i++] = tolerance + 1;\n  }\n\n  const offset = tolerance - delta;\n  const haveMax = tolerance < lenB;\n\n  let jStart = 0;\n  let jEnd = tolerance;\n\n  let current = 0;\n  let left = 0;\n  let above = 0;\n  let charA = 0;\n  let j = 0;\n\n  // Starting the nested loops\n  for (i = 0; i < lenA; i++) {\n    left = i;\n    current = i + 1;\n\n    charA = a.charCodeAt(startIdx + i);\n    jStart += i > offset ? 1 : 0;\n    jEnd += jEnd < lenB ? 1 : 0;\n\n    for (j = jStart; j < jEnd; j++) {\n      above = current;\n\n      current = left;\n      left = row[j];\n\n      if (charA !== characterCodeCache[j]) {\n        // insert current\n        if (left < current) {\n          current = left;\n        }\n\n        // delete current\n        if (above < current) {\n          current = above;\n        }\n\n        current++;\n      }\n\n      row[j] = current;\n    }\n\n    if (haveMax && row[i + delta] > tolerance) {\n      return -1;\n    }\n  }\n\n  return current <= tolerance ? current : -1;\n}\n\nexport function levenshtein(a: string, b: string): number {\n  /* c8 ignore next 3 */\n  if (!a.length) {\n    return b.length;\n  }\n\n  /* c8 ignore next 3 */\n  if (!b.length) {\n    return a.length;\n  }\n\n  const swap = a;\n  if (a.length > b.length) {\n    a = b;\n    b = swap;\n  }\n\n  const row = Array.from({ length: a.length + 1 }, (_, i) => i);\n  let val = 0;\n\n  for (let i = 1; i <= b.length; i++) {\n    let prev = i;\n\n    for (let j = 1; j <= a.length; j++) {\n      if (b[i - 1] === a[j - 1]) {\n        val = row[j - 1];\n      } else {\n        val = Math.min(row[j - 1] + 1, Math.min(prev + 1, row[j] + 1));\n      }\n\n      row[j - 1] = prev;\n      prev = val;\n    }\n    row[a.length] = prev;\n  }\n\n  return row[a.length];\n}\n"],"names":["boundedLevenshtein","a","b","tolerance","distance","_boundedLevenshtein","isBounded","swap","length","lenA","lenB","charCodeAt","startIdx","delta","i","row","characterCodeCache","offset","haveMax","jStart","jEnd","current","left","above","charA","j","levenshtein","Array","from","_","val","prev","Math","min"],"mappings":"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"}