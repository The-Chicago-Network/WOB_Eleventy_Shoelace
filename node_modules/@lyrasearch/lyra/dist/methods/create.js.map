{"version":3,"sources":["../../src/methods/create.ts"],"sourcesContent":["import type { Configuration, Lyra, PropertiesSchema } from \"../types/index.js\";\nimport { defaultTokenizerConfig, Language } from \"../tokenizer/index.js\";\nimport * as ERRORS from \"../errors.js\";\nimport { create as createNode } from \"../trees/radix/node.js\";\nimport { create as createAVLNode } from \"../trees/avl/index.js\";\nimport { validateHooks } from \"./hooks.js\";\nimport { intersectTokenScores } from \"../algorithms.js\";\n\n/**\n * Creates a new database.\n * @param properties Options to initialize the database with.\n * @example\n * // Create a database that stores documents containing 'author' and 'quote' fields.\n * const db = await create({\n *   schema: {\n *     author: 'string',\n *     quote: 'string'\n *   },\n *   hooks: {\n *     afterInsert: [afterInsertHook],\n *   }\n * });\n */\nexport async function create<S extends PropertiesSchema>(properties: Configuration<S>): Promise<Lyra<S>> {\n  const defaultLanguage = (properties?.defaultLanguage?.toLowerCase() as Language) ?? \"english\";\n\n  const tokenizer = defaultTokenizerConfig(defaultLanguage, properties.components?.tokenizer ?? {});\n  tokenizer.assertSupportedLanguage(defaultLanguage);\n\n  validateHooks(properties.hooks);\n\n  const instance: Lyra<S> = {\n    defaultLanguage,\n    schema: properties.schema,\n    docs: {},\n    docsCount: 0,\n    index: {},\n    hooks: properties.hooks || {},\n    edge: properties.edge ?? false,\n    frequencies: {},\n    tokenOccurrencies: {},\n    avgFieldLength: {},\n    fieldLengths: {},\n    components: {\n      elapsed: properties.components?.elapsed ?? {},\n      tokenizer,\n      algorithms: {\n        intersectTokenScores: properties.components?.algorithms?.intersectTokenScores ?? intersectTokenScores,\n      },\n    },\n  };\n\n  buildIndex(instance, properties.schema);\n  return instance;\n}\n\nfunction buildIndex<S extends PropertiesSchema>(lyra: Lyra<S>, schema: S, prefix = \"\") {\n  for (const prop of Object.keys(schema)) {\n    const propType = typeof prop;\n    const isNested = typeof schema[prop] === \"object\";\n\n    if (propType !== \"string\") throw new Error(ERRORS.INVALID_SCHEMA_TYPE(propType));\n\n    const propName = `${prefix}${prop}`;\n\n    if (isNested) {\n      buildIndex(lyra, schema[prop] as S, `${propName}.`);\n    } else {\n      if (schema[prop] === \"string\") {\n        lyra.index[propName] = createNode();\n        lyra.avgFieldLength[propName] = 0;\n        continue;\n      }\n      \n      if (schema[prop] === \"number\") {\n        lyra.index[propName] = createAVLNode<number, string[]>(0, []);\n        continue;\n      }\n    }\n  }\n}\n"],"names":["defaultTokenizerConfig","ERRORS","create","createNode","createAVLNode","validateHooks","intersectTokenScores","properties","defaultLanguage","toLowerCase","tokenizer","components","assertSupportedLanguage","hooks","instance","schema","docs","docsCount","index","edge","frequencies","tokenOccurrencies","avgFieldLength","fieldLengths","elapsed","algorithms","buildIndex","lyra","prefix","prop","Object","keys","propType","isNested","Error","INVALID_SCHEMA_TYPE","propName"],"mappings":"AACA,SAASA,sBAAsB,QAAkB,wBAAwB;AACzE,YAAYC,YAAY,eAAe;AACvC,SAASC,UAAUC,UAAU,QAAQ,yBAAyB;AAC9D,SAASD,UAAUE,aAAa,QAAQ,wBAAwB;AAChE,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,oBAAoB,QAAQ,mBAAmB;AAExD;;;;;;;;;;;;;;CAcC,GACD,OAAO,eAAeJ,OAAmCK,UAA4B,EAAoB;QAC9EA,6BAEiCA,wBAkB7CA,yBAGeA;IAvB5B,MAAMC,kBAAkB,CAACD,uBAAAA,wBAAAA,KAAAA,IAAAA,CAAAA,8BAAAA,WAAYC,eAAe,cAA3BD,yCAAAA,KAAAA,IAAAA,4BAA6BE,kBAA8B;IAEpF,MAAMC,YAAYV,uBAAuBQ,iBAAiBD,CAAAA,CAAAA,yBAAAA,WAAWI,UAAU,cAArBJ,oCAAAA,KAAAA,IAAAA,uBAAuBG,SAAS,AAAD,KAAK,CAAC;IAC/FA,UAAUE,uBAAuB,CAACJ;IAElCH,cAAcE,WAAWM,KAAK;IAE9B,MAAMC,WAAoB;QACxBN;QACAO,QAAQR,WAAWQ,MAAM;QACzBC,MAAM,CAAC;QACPC,WAAW;QACXC,OAAO,CAAC;QACRL,OAAON,WAAWM,KAAK,IAAI,CAAC;QAC5BM,MAAMZ,WAAWY,IAAI,IAAI,KAAK;QAC9BC,aAAa,CAAC;QACdC,mBAAmB,CAAC;QACpBC,gBAAgB,CAAC;QACjBC,cAAc,CAAC;QACfZ,YAAY;YACVa,SAASjB,CAAAA,CAAAA,0BAAAA,WAAWI,UAAU,cAArBJ,qCAAAA,KAAAA,IAAAA,wBAAuBiB,OAAO,AAAD,KAAK,CAAC;YAC5Cd;YACAe,YAAY;gBACVnB,sBAAsBC,CAAAA,CAAAA,0BAAAA,WAAWI,UAAU,cAArBJ,qCAAAA,KAAAA,IAAAA,qCAAAA,wBAAuBkB,uEAAvBlB,KAAAA,sCAAmCD,oBAAF,AAAD,KAA2BA;YACnF;QACF;IACF;IAEAoB,WAAWZ,UAAUP,WAAWQ,MAAM;IACtC,OAAOD;AACT,CAAC;AAED,SAASY,WAAuCC,IAAa,EAAEZ,MAAS,EAAEa,SAAS,EAAE,EAAE;IACrF,KAAK,MAAMC,QAAQC,OAAOC,IAAI,CAAChB,QAAS;QACtC,MAAMiB,WAAW,OAAOH;QACxB,MAAMI,WAAW,OAAOlB,MAAM,CAACc,KAAK,KAAK;QAEzC,IAAIG,aAAa,UAAU,MAAM,IAAIE,MAAMjC,OAAOkC,mBAAmB,CAACH,WAAW;QAEjF,MAAMI,WAAW,CAAC,EAAER,OAAO,EAAEC,KAAK,CAAC;QAEnC,IAAII,UAAU;YACZP,WAAWC,MAAMZ,MAAM,CAACc,KAAK,EAAO,CAAC,EAAEO,SAAS,CAAC,CAAC;QACpD,OAAO;YACL,IAAIrB,MAAM,CAACc,KAAK,KAAK,UAAU;gBAC7BF,KAAKT,KAAK,CAACkB,SAAS,GAAGjC;gBACvBwB,KAAKL,cAAc,CAACc,SAAS,GAAG;gBAChC,QAAS;YACX,CAAC;YAED,IAAIrB,MAAM,CAACc,KAAK,KAAK,UAAU;gBAC7BF,KAAKT,KAAK,CAACkB,SAAS,GAAGhC,cAAgC,GAAG,EAAE;gBAC5D,QAAS;YACX,CAAC;QACH,CAAC;IACH;AACF"}