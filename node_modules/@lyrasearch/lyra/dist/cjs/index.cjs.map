{"version":3,"sources":["../../src/cjs/index.cts"],"sourcesContent":["import type { create as esmCreate } from \"../methods/create.js\";\nimport type {\n  insert as esmInsert,\n  insertBatch as esmInsertBatch,\n  insertWithHooks as esmInsertWithHooks,\n} from \"../methods/insert.js\";\nimport type { load as esmLoad } from \"../methods/load.js\";\nimport type { remove as esmRemove } from \"../methods/remove.js\";\nimport type { save as esmSave } from \"../methods/save.js\";\nimport type { search as esmSearch } from \"../methods/search.js\";\n\nexport interface LyraExport {\n  create: typeof esmCreate;\n  insert: typeof esmInsert;\n  insertWithHooks: typeof esmInsertWithHooks;\n  insertBatch: typeof esmInsertBatch;\n  remove: typeof esmRemove;\n  search: typeof esmSearch;\n  save: typeof esmSave;\n  load: typeof esmLoad;\n}\n\nexport type RequireCallback = (err: Error | undefined, lyra?: LyraExport) => void;\n\nlet _esmCreate: typeof esmCreate;\nlet _esmInsert: typeof esmInsert;\nlet _esmInsertWithHooks: typeof esmInsertWithHooks;\nlet _esmInsertBatch: typeof esmInsertBatch;\nlet _esmRemove: typeof esmRemove;\nlet _esmSearch: typeof esmSearch;\nlet _esmSave: typeof esmSave;\nlet _esmLoad: typeof esmLoad;\n\nexport async function create(...args: Parameters<typeof esmCreate>): ReturnType<typeof esmCreate> {\n  if (!_esmCreate) {\n    const imported = await import(\"../methods/create.js\");\n    _esmCreate = imported.create;\n  }\n\n  return _esmCreate(...args);\n}\n\nexport async function insert(...args: Parameters<typeof esmInsert>): ReturnType<typeof esmInsert> {\n  if (!_esmInsert) {\n    const imported = await import(\"../methods/insert.js\");\n    _esmInsert = imported.insert;\n  }\n\n  return _esmInsert(...args);\n}\n\nexport async function insertWithHooks(\n  ...args: Parameters<typeof esmInsertWithHooks>\n): ReturnType<typeof esmInsertWithHooks> {\n  if (!_esmInsertWithHooks) {\n    const imported = await import(\"../methods/insert.js\");\n    _esmInsertWithHooks = imported.insertWithHooks;\n  }\n\n  return _esmInsertWithHooks(...args);\n}\n\nexport async function insertBatch(...args: Parameters<typeof esmInsertBatch>): ReturnType<typeof esmInsertBatch> {\n  if (!_esmInsertBatch) {\n    const imported = await import(\"../methods/insert.js\");\n    _esmInsertBatch = imported.insertBatch;\n  }\n\n  return _esmInsertBatch(...args);\n}\n\nexport async function remove(...args: Parameters<typeof esmRemove>): ReturnType<typeof esmRemove> {\n  if (!_esmRemove) {\n    const imported = await import(\"../methods/remove.js\");\n    _esmRemove = imported.remove;\n  }\n\n  return _esmRemove(...args);\n}\n\nexport async function search(...args: Parameters<typeof esmSearch>): ReturnType<typeof esmSearch> {\n  if (!_esmSearch) {\n    const imported = await import(\"../methods/search.js\");\n    _esmSearch = imported.search;\n  }\n\n  return _esmSearch(...args);\n}\n\nexport async function save(...args: Parameters<typeof esmSave>): ReturnType<typeof esmSave> {\n  if (!_esmSave) {\n    const imported = await import(\"../methods/save.js\");\n    _esmSave = imported.save;\n  }\n\n  return _esmSave(...args);\n}\n\nexport async function load(...args: Parameters<typeof esmLoad>): ReturnType<typeof esmLoad> {\n  if (!_esmLoad) {\n    const imported = await import(\"../methods/load.js\");\n    _esmLoad = imported.load;\n  }\n\n  return _esmLoad(...args);\n}\n\nexport function requireLyra(callback: RequireCallback): void {\n  import(\"../index.js\")\n    .then((loaded: LyraExport) => setTimeout(() => callback(undefined, loaded), 1))\n    .catch((error: Error) => setTimeout(() => callback(error), 1));\n}\n"],"names":["create","insert","insertWithHooks","insertBatch","remove","search","save","load","requireLyra","_esmCreate","_esmInsert","_esmInsertWithHooks","_esmInsertBatch","_esmRemove","_esmSearch","_esmSave","_esmLoad","args","imported","callback","then","loaded","setTimeout","undefined","catch","error"],"mappings":";;;;;;;;;;;IAiCsBA,MAAM,MAANA;IASAC,MAAM,MAANA;IASAC,eAAe,MAAfA;IAWAC,WAAW,MAAXA;IASAC,MAAM,MAANA;IASAC,MAAM,MAANA;IASAC,IAAI,MAAJA;IASAC,IAAI,MAAJA;IASNC,WAAW,MAAXA;;AAnFhB,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAEG,eAAehB,OAAO,GAAGiB,IAAkC,EAAgC;IAChG,IAAI,CAACR,YAAY;QACf,MAAMS,WAAW,MAAM,MAAM,CAAC;QAC9BT,aAAaS,SAASlB,MAAM;IAC9B,CAAC;IAED,OAAOS,cAAcQ;AACvB;AAEO,eAAehB,OAAO,GAAGgB,IAAkC,EAAgC;IAChG,IAAI,CAACP,YAAY;QACf,MAAMQ,WAAW,MAAM,MAAM,CAAC;QAC9BR,aAAaQ,SAASjB,MAAM;IAC9B,CAAC;IAED,OAAOS,cAAcO;AACvB;AAEO,eAAef,gBACpB,GAAGe,IAA2C,EACP;IACvC,IAAI,CAACN,qBAAqB;QACxB,MAAMO,WAAW,MAAM,MAAM,CAAC;QAC9BP,sBAAsBO,SAAShB,eAAe;IAChD,CAAC;IAED,OAAOS,uBAAuBM;AAChC;AAEO,eAAed,YAAY,GAAGc,IAAuC,EAAqC;IAC/G,IAAI,CAACL,iBAAiB;QACpB,MAAMM,WAAW,MAAM,MAAM,CAAC;QAC9BN,kBAAkBM,SAASf,WAAW;IACxC,CAAC;IAED,OAAOS,mBAAmBK;AAC5B;AAEO,eAAeb,OAAO,GAAGa,IAAkC,EAAgC;IAChG,IAAI,CAACJ,YAAY;QACf,MAAMK,WAAW,MAAM,MAAM,CAAC;QAC9BL,aAAaK,SAASd,MAAM;IAC9B,CAAC;IAED,OAAOS,cAAcI;AACvB;AAEO,eAAeZ,OAAO,GAAGY,IAAkC,EAAgC;IAChG,IAAI,CAACH,YAAY;QACf,MAAMI,WAAW,MAAM,MAAM,CAAC;QAC9BJ,aAAaI,SAASb,MAAM;IAC9B,CAAC;IAED,OAAOS,cAAcG;AACvB;AAEO,eAAeX,KAAK,GAAGW,IAAgC,EAA8B;IAC1F,IAAI,CAACF,UAAU;QACb,MAAMG,WAAW,MAAM,MAAM,CAAC;QAC9BH,WAAWG,SAASZ,IAAI;IAC1B,CAAC;IAED,OAAOS,YAAYE;AACrB;AAEO,eAAeV,KAAK,GAAGU,IAAgC,EAA8B;IAC1F,IAAI,CAACD,UAAU;QACb,MAAME,WAAW,MAAM,MAAM,CAAC;QAC9BF,WAAWE,SAASX,IAAI;IAC1B,CAAC;IAED,OAAOS,YAAYC;AACrB;AAEO,SAAST,YAAYW,QAAyB,EAAQ;IAC3D,MAAM,CAAC,eACJC,IAAI,CAAC,CAACC,SAAuBC,WAAW,IAAMH,SAASI,WAAWF,SAAS,IAC3EG,KAAK,CAAC,CAACC,QAAiBH,WAAW,IAAMH,SAASM,QAAQ;AAC/D"}