import type { AVLNode } from "./node.js";
export declare function create<K, V>(key: K, value: V): AVLNode<K, V>;
export declare function insert<K, V extends any[]>(node: AVLNode<K, V>, key: K, value: V): AVLNode<K, V>;
export declare function find<K, V>(node: AVLNode<K, V>, key: K): V | null;
export declare function getNodeByKey<K, V>(node: AVLNode<K, V>, key: K): AVLNode<K, V> | null;
export declare function remove<K, V>(node: AVLNode<K, V>, key: K): AVLNode<K, V> | null;
export declare function contains<K, V>(node: AVLNode<K, V>, key: K): boolean;
export declare function getSize<K, V>(node: AVLNode<K, V> | null): number;
export declare function isBalanced<K, V>(node: AVLNode<K, V> | null): boolean;
export declare function rangeSearch<K, V extends any[]>(node: AVLNode<K, V>, min: K, max: K): V;
export declare function greaterThan<K, V extends any[]>(node: AVLNode<K, V>, key: K, inclusive?: boolean): V;
export declare function lessThan<K, V extends any[]>(node: AVLNode<K, V>, key: K, inclusive?: boolean): V;
