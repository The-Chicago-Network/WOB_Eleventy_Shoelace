{"version":3,"sources":["../../../src/trees/avl/index.ts"],"sourcesContent":["import type { AVLNode } from \"./node.js\";\nimport { createAVLNode } from \"./node.js\";\nimport { BALANCE_STATE, getBalanceFactor, rotateLeft, rotateRight, findMin, getHeight } from \"./utils.js\";\n\nexport function create<K, V>(key: K, value: V): AVLNode<K, V> {\n  return createAVLNode(key, value);\n}\n\nexport function insert<K, V extends any[]>(node: AVLNode<K, V>, key: K, value: V): AVLNode<K, V> {\n  if (!node) {\n    return create(key, value);\n  }\n\n  if (key < node.key) {\n    node.left = insert(node.left as AVLNode<K, V>, key, value);\n  } else if (key > node.key) {\n    node.right = insert(node.right as AVLNode<K, V>, key, value);\n  } else {\n    (node.value as string[]) = node.value.concat(value);\n    return node;\n  }\n\n  const balanceFactor = getBalanceFactor(node);\n\n  if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n    if (key < (node.left as AVLNode<K, V>).key) {\n      node = rotateRight(node);\n    } else {\n      node.left = rotateLeft(node.left as AVLNode<K, V>);\n      node = rotateRight(node);\n    }\n  }\n\n  if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n    if (key > (node.right as AVLNode<K, V>).key) {\n      node = rotateLeft(node);\n    } else {\n      node.right = rotateRight(node.right as AVLNode<K, V>);\n      node = rotateLeft(node);\n    }\n  }\n\n  return node;\n}\n\nexport function find<K, V>(node: AVLNode<K, V>, key: K): V | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.key === key) {\n    return node.value;\n  }\n\n  if (key < node.key) {\n    return node.left ? find(node.left, key) : null;\n  }\n\n  return node.right ? find(node.right, key) : null;\n}\n\nexport function getNodeByKey<K, V>(node: AVLNode<K, V>, key: K): AVLNode<K, V> | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.key === key) {\n    return node;\n  }\n\n  if (key < node.key) {\n    return node.left ? getNodeByKey(node.left, key) : null;\n  }\n\n  return node.right ? getNodeByKey(node.right, key) : null;\n}\n\nexport function remove<K, V>(node: AVLNode<K, V>, key: K): AVLNode<K, V> | null {\n  if (!node) {\n    return null;\n  }\n\n  if (key < node.key) {\n    node.left = remove(node.left as AVLNode<K, V>, key);\n  } else if (key > node.key) {\n    node.right = remove(node.right as AVLNode<K, V>, key);\n  } else {\n    if (!node.left && !node.right) {\n      return null;\n    }\n\n    if (!node.left) {\n      return node.right as AVLNode<K, V>;\n    }\n\n    if (!node.right) {\n      return node.left as AVLNode<K, V>;\n    }\n\n    const temp = findMin(node.right as AVLNode<K, V>);\n    node.key = temp.key;\n    node.right = remove(node.right as AVLNode<K, V>, temp.key);\n  }\n\n  const balanceFactor = getBalanceFactor(node);\n\n  const leftNode = node.left as AVLNode<K, V>\n  const rightNode = node.right as AVLNode<K, V>\n\n  if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n    if (getBalanceFactor(leftNode) === BALANCE_STATE.BALANCED || getBalanceFactor(leftNode) === BALANCE_STATE.SLIGHTLY_UNBALANCED_LEFT) {\n      return rotateRight(node);\n    }\n\n    if (getBalanceFactor(leftNode) === BALANCE_STATE.SLIGHTLY_UNBALANCED_RIGHT) {\n      node.left = rotateLeft(leftNode);\n      return rotateRight(node);\n    }\n  }\n\n  if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n    if (getBalanceFactor(rightNode) === BALANCE_STATE.BALANCED || getBalanceFactor(rightNode) === BALANCE_STATE.SLIGHTLY_UNBALANCED_RIGHT) {\n      return rotateLeft(node);\n    }\n\n    if (getBalanceFactor(rightNode) === BALANCE_STATE.SLIGHTLY_UNBALANCED_LEFT) {\n      node.right = rotateRight(rightNode);\n      return rotateLeft(node);\n    }\n  }\n\n  return node;\n}\n\nexport function contains<K, V>(node: AVLNode<K, V>, key: K): boolean {\n  return !!find(node, key);\n}\n\nexport function getSize<K, V>(node: AVLNode<K, V> | null): number {\n  if (!node) {\n    return 0;\n  }\n\n  return 1 + getSize(node.left) + getSize(node.right);\n}\n\nexport function isBalanced<K, V>(node: AVLNode<K, V> | null): boolean {\n  if (!node) {\n    return true;\n  }\n\n  const heightDiff = Math.abs(getHeight(node.left) - getHeight(node.right));\n  return heightDiff <= 1 && isBalanced(node.left) && isBalanced(node.right);\n}\n\nexport function rangeSearch<K, V extends any[]>(node: AVLNode<K, V>, min: K, max: K): V {\n  if (!node) {\n    return [] as unknown as V;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V = [];\n\n  function traverse(node: AVLNode<K, V>) {\n    if (!node) {\n      return;\n    }\n\n    if (node.key > min) {\n      traverse(node.left as AVLNode<K, V>);\n    }\n\n    if (node.key >= min && node.key <= max) {\n      result.push(...node.value as V[]);\n    }\n\n    if (node.key < max) {\n      traverse(node.right as AVLNode<K, V>);\n    }\n  }\n\n  traverse(node);\n\n  return result;\n}\n\nexport function greaterThan<K, V extends any[]>(node: AVLNode<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V = [];\n\n  function traverse(node: AVLNode<K, V>) {\n    if (!node) {\n      return;\n    }\n\n    if (inclusive && node.key >= key) {\n      result.push(...node.value);\n    }\n\n    if (!inclusive && node.key > key) {\n      result.push(...node.value as V[]);\n    }\n\n    traverse(node.left as AVLNode<K, V>);\n    traverse(node.right as AVLNode<K, V>);\n  }\n\n  traverse(node);\n\n  return result;\n}\n\nexport function lessThan<K, V extends any[]>(node: AVLNode<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V = [];\n\n  function traverse(node: AVLNode<K, V>) {\n    if (!node) {\n      return;\n    }\n\n    if (inclusive && node.key <= key) {\n      result.push(...node.value as V[]);\n    }\n\n    if (!inclusive && node.key < key) {\n      result.push(...node.value as V[]);\n    }\n\n    traverse(node.left as AVLNode<K, V>);\n    traverse(node.right as AVLNode<K, V>);\n  }\n\n  traverse(node);\n\n  return result;\n}"],"names":["createAVLNode","BALANCE_STATE","getBalanceFactor","rotateLeft","rotateRight","findMin","getHeight","create","key","value","insert","node","left","right","concat","balanceFactor","UNBALANCED_LEFT","UNBALANCED_RIGHT","find","getNodeByKey","remove","temp","leftNode","rightNode","BALANCED","SLIGHTLY_UNBALANCED_LEFT","SLIGHTLY_UNBALANCED_RIGHT","contains","getSize","isBalanced","heightDiff","Math","abs","rangeSearch","min","max","result","traverse","push","greaterThan","inclusive","lessThan"],"mappings":"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"}